<!DOCTYPE html>
<html lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<title>Mezők Jellemzők</title>
	<meta name="description" content="Give your node.js express apps some extra arms">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="content/bootstrap.css">
	<link rel="stylesheet" href="content/syntax.css">
	<link rel="stylesheet" href="content/kraken.css">
</head>
<body data-spy="scroll" data-target="#documentation-nav">





    

<div id="documentation">
<div class="container">

<nav id="documentation-nav" class="col-sm-3 hidden-xs">
<ul style="top: 490px;" class="nav affix"><li class=""><a href="#gettingstarted">Getting started</a></li><li class=""><a href="#structure-of-a-project">Structure of a Project</a></li><li class=""><a href="#configuration">Configuration</a></li><li class="active"><a href="#security">Security</a></li><li><a href="#routes">Routes</a></li><li><a href="#models">Models</a></li><li><a href="#templates">Templates</a></li><li><a href="#localization">Localization</a></li><li><a href="#faq">FAQ</a></li><li><a href="#examples">Examples</a></li></ul>
</nav>

<div class="col-sm-9">
<div id="gettingstarted" class="doc">

<h3 id="getting-started">Mezők Jellemzők</h3>
<h2 id="getting-started">Getting started</h2>

<h4 id="install-the-generator">1. Install the generator</h4>

<p>Start by installing the generator globally using npm: <code>sudo npm install -g generator-kraken</code></p>

<h4 id="create-a-project">2. Create a project</h4>

<p>Once installed, you can create a basic project using the generator. Type <code>yo kraken</code> and follow the prompts:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">$ yo kraken

     ,'""`.
hh  / _  _ \
    |(@)(@)|   Release the Kraken!
    )  __  (
   /,'))((`.\
  (( ((  )) ))
   `\ `)(' /'

Tell me a bit about your application:

[?] Name: HelloWorld
[?] Description: A test kraken application
[?] Author: YourName GoesHere
...</code></pre></div>

<p>The generator will create a new directory for your application, set 
up an empty project and download all the necessary dependencies.</p>

<h4 id="start-your-server">3. Start your server</h4>

<p>To run your project, just go into the newly created directory and type <code>npm start</code>:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">$ cd HelloWorld
$ npm start

&gt; helloworld@0.1.0 start ~/HelloWorld
&gt; node index.js

[development] Listening on http://localhost:8000</code></pre></div>

<p>Your kraken application will start up on port 8000. You can visit it at <a href="#">http://localhost:8000</a>. If all goes well, your very polite application will say hello.</p>

<h3 id="structure-of-a-project">Structure of a Project</h3>

<p>Kraken keeps your code organized by splitting up the configuration, 
content+templates and routing logic into different places so that it’s 
easy to keep track of everything and to easily swap out components. 
Let’s start by looking at the base structure of the project you just 
created:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">/config  
Application configuration including environment-specific configs

/controllers
Routes and logic

/locales
Language specific content bundles

/lib
Common libraries to be used across your app

/models
Models

/public
Web resources that are publicly available

/public/templates
Server and browser-side templates

/tasks
Grunt tasks to be automatically registered by [grunt-config-dir](https://github.com/logankoester/grunt-config-dir)

/tests
Unit and functional test cases

index.js
Application entry point</code></pre></div>

<p>Let’s say you want to create a simple application. As your 
application grows, this becomes unmanageable and messy. Kraken helps you
 stay organized by imposing a sound structure and strategy.</p>

<p>First let’s look at our basic <code>index.js</code> entry point:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s1">'use strict'</span><span class="p">;</span>


<span class="kd">var</span> <span class="nx">kraken</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'kraken-js'</span><span class="p">),</span>
    <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">)(),</span>
    <span class="nx">options</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./lib/spec'</span><span class="p">)(</span><span class="nx">app</span><span class="p">),</span>
    <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>


<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">kraken</span><span class="p">(</span><span class="nx">options</span><span class="p">));</span>


<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'[%s] Listening on http://localhost:%d'</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">env</span><span class="p">,</span> <span class="nx">port</span><span class="p">);</span>
<span class="p">});</span></code></pre></div>

<p>And <code>./lib/spec.js</code> returns a simple object:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s1">'use strict'</span><span class="p">;</span>


<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">spec</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">onconfig</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">config</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'view engines:js:renderer:arguments'</span><span class="p">).</span><span class="nx">push</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>

            <span class="nx">next</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">};</span></code></pre></div>

<p>As you can see from the <code>index.js</code> entry point, kraken is just an express middleware. Our <code>spec.js</code> just returns an object that defines an <code>onconfig</code>. That function is called when the application begins configuration.</p>

<p>So, where’s all the configuration? Where are the routes?</p>

<h3 id="configuration">Configuration</h3>

<p>Kraken’s configuration can be found in the <code>config/config.json</code> file.</p>

<p>This JSON file contains key value pairs that are loaded at runtime. 
The advantage of this is that all your application configuration is in a
 single, well-known place; and you can swap it out without having to 
touch a single line of code.</p>

<p>This config file is also where you can define middleware and specify it’s load-order. To find out more, check out <a href="#">meddleware</a>.</p>

<h4 id="development-vs-production-environments">Development vs. Production environments</h4>

<p>A common scenario is that development environments have slightly 
different parameters than production. Kraken allows you to define a 
second file <code>config/development.json</code> with alternate values.</p>

<p>You can control which file is loaded by defining an environment variable: <code>NODE_ENV</code> and setting its value to <code>production</code> or <code>development</code> as appropriate.</p>

<h3 id="security">Security</h3>

<p>Security is provided out-of-the-box by the <a href="#">Lusca</a> module. Lusca is middleware for express, and it follows <a href="#">OWASP</a> best practices by enabling the following request/response headers for all calls:</p>

<ul>
  <li><a href="#">Cross Site Request Forgery</a></li>
  <li><a href="#">Content Security Policy</a></li>
  <li><a href="#">Platform for Privacy Preferences Project</a></li>
  <li><a href="#">X-FRAME-OPTIONS</a></li>
  <li>And more!</li>
</ul>

<p>If you want to disable or configure them, please see the <a href="#">Lusca README</a>.</p>

<h3 id="routes">Routes</h3>

<p>Kraken moves the routing logic into separate files in the <code>controllers</code> folder, allowing you to group routes by functionality.</p>

<p>For example, a route for your home page, would use a <code>controllers/index.js</code> file that looks as follows:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">IndexModel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/index'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IndexModel</span><span class="p">();</span>

    <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">'index'</span><span class="p">,</span> <span class="nx">model</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span></code></pre></div>

<p>This file would define the routes and the logic for the home page. 
The advantage of keeping routes and logic segregated in individual files
 starts to show as the application grows. If something fails, it’s very 
easy to pinpoint where things went wrong.</p>

<p>Kraken is built on top of express, so the rest of the logic should be familiar to Node developers.</p>

<p>New to 1.x, your controllers are given an instance of your top-level <code>router</code> instead of the <code>app</code>
 instance, and routes are automatically determined for you based on 
folder-structure. For example, if you wanted to specify a handler for <code>/users</code>, simple drop this in <code>/controllers/users/index.js</code>:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// notice that my route is '/' but I respond to '/users'</span>
    <span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'you can find me at /users'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span></code></pre></div>

<p>With 1.x, route registration is supercharged and very flexible. Check out <a href="#">express-enrouten</a> to learn more.</p>

<h3 id="models">Models</h3>

<p>Kraken also separates data models from the controller logic, resulting in cleaner, more organized code. Data models live in the <code>models</code> folder.</p>

<p>When a new controller is created, the framework will also create a simple model for you.</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">IndexModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s1">'myApp'</span>
    <span class="p">};</span>
<span class="p">};</span></code></pre></div>

<p>While not very complex, this model serves as a base to build upon. See the <a href="#">Kraken Shopping Cart</a> example for more complex usage of models.</p>

<h3 id="templates">Templates</h3>

<p>Kraken uses <a href="#">LinkedIn’s Dust</a> as the templating language of choice. <a href="#">Adaro</a> is the module responsible for rendering and managing the templates.</p>

<p>Templates are loaded from the <code>public/templates</code> 
directory. Because they reside in the public folder, this allows kraken 
to use the same templates on the server side as well as the client side,
 allowing you to reuse code.</p>

<p>If we wanted to greet our customers, a basic template would be:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span>Hello {name}!<span class="nt">&lt;/h1&gt;</span></code></pre></div>

<h3 id="localization">Localization</h3>

<p>Thanks to <a href="#">Makara</a>, 
kraken has the ability to load content bundles on the fly, based on the 
request context. If we wanted to greet a user in their native language 
(e.g.: Spanish), we can simply add this context to the response before 
rendering the template:</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">res</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">context</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">locality</span><span class="o">:</span> <span class="p">{</span> <span class="nx">language</span><span class="o">:</span> <span class="s1">'es'</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="s1">'ES'</span> <span class="p">}</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">'Antonio Banderas'</span> <span class="p">};</span>
<span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">'index'</span><span class="p">,</span><span class="nx">model</span><span class="p">);</span></code></pre></div>

<p>We would also change our template as follows, using a <code>@pre type="content"</code> tag:</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h1&gt;</span>{@pre type="content" key="index.greeting"/}<span class="nt">&lt;/h1&gt;</span></code></pre></div>

<p>This instructs the framework to pick up the index.greeting string from one of the locale content bundles.</p>

<p>The <code>locales</code> directory holds these bundles, organized by country and language. The bundles are nothing more than simple <code>key=value</code> .property files. If our sample application caters to English and Spanish speakers, we would create two bundles:</p>

<p><code>locales/US/en/index.properties</code> to hold <code>index.greeting=Hello {name}!</code></p>

<p>and</p>

<p><code>locales/ES/es/index.properties</code> to hold <code>index.greeting=Hola {name}!</code></p>

<p>So, in the above example, since the language and country are set to <code>es</code> and <code>ES</code> respectively, the framework would pick the second bundle and display:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">Hola Antonio Banderas!</code></pre></div>

<h3 id="faq">FAQ</h3>

<h4 id="how-can-i-contribute-to-this-project">How can I contribute to this project?</h4>

<p>Bugs and new features should be submitted using <a href="#">GitHub issues</a>.
 Please include with a detailed description and the expected behavior. 
If you would like to submit a change yourself do the following steps.</p>

<ul>
  <li>Fork it.</li>
  <li>Create a feature branch.</li>
  <li>Commit a test that fails due to the bug</li>
  <li>Commit a fix that makes the test pass</li>
  <li>Open a <a href="#">pull request</a>.</li>
</ul>

<h4 id="there-is-a-typo-on-this-page">There is a typo on this page!</h4>

<p>Good catch! This page is built from the <code>krakenjs.github.io</code> repository. You can <a href="#">let us know about it</a>, or better yet, send us a <a href="#">pull request</a>.</p>

<h3 id="examples">Examples</h3>

<p>Here’s a few examples to get you going with kraken:</p>

<ul>
  <li>
    <p><strong><a href="#">Kraken Shopping Cart</a></strong><br>
An end-to-end example showing how to build a shopping cart that integrates with PayPal</p>
  </li>
  <li>
    <p><strong><a href="#">Kraken Passport Integration</a></strong><br>
Authenticate and securely store user credentials using Passport, Mongo and bcrypt</p>
  </li>
  <li>
    <p><strong><a href="#">Localization and Internationalization</a></strong><br>
Greet users in different languages. Shows support for localized content bundles.</p>
  </li>
  <li>
    <p><strong><a href="#">Specialization</a></strong><br>
Show different layouts to different users based on a set of rules (locality, A/B testing, etc).</p>
  </li>
</ul>

</div>
            </div>

        </div>
    </div>



<script>
window.onscroll = scroll;
var le = 0;
document.querySelector("#documentation-nav .affix").style["top"]= le-window.pageYOffset + "px";
function scroll () 
{
	if(window.pageYOffset > le)
		document.querySelector("#documentation-nav .affix").style["top"]= 0;
	else
		document.querySelector("#documentation-nav .affix").style["top"]= le-window.pageYOffset + "px";
}
</script>

</body></html>