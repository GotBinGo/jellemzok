<!DOCTYPE html>
<html lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<title>Mezők, Jellemzők</title>
	<meta name="description" content="Give your node.js express apps some extra arms">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="content/bootstrap.css">
	<link rel="stylesheet" href="content/syntax.css">
	<link rel="stylesheet" href="content/kraken.css">
</head>
<body data-spy="scroll" data-target="#documentation-nav">

<div id="documentation">
<div class="container">

<nav id="documentation-nav" class="col-sm-3 hidden-xs">
<ul style="top: 490px;" class="nav affix">
<li class=""><a href="#ismetles">Ismétlés</a></li>
<li class=""><a href="#mezok">Mezők</a></li>
<li class=""><a href="#metomezok">Mezők elérése metódussal</a></li>
</nav>

<div class="col-sm-9">
<div id="gettingstarted" class="doc">

<h2 id="getting-started">Mezők, Jellemzők</h2>
<p>
Ebben a C# leckében, a <code>mezőkről</code> és <code>jellemzőkről</code>, és azok kapcsolatáról lesz szó, továbbá arról, hogy ezek hogyan könnyítik és gyorsíják meg a programozást, mindezt gyakorlati példák segítségével. 
</p>
<p>
A lecke megértéséhez feltétlenül szükséges hogy ismerd az objektumorientált programozás alapjait. Ebbe beletartozik az osztályok létrehozása, példányosítása, valamint hozzáférési szintek kezelése.
</p>
<h3 id="ismetles">Ismétlés</h3>
<pre>
class Foo
{
    public int adat = 5;
}    
Foo a = new Foo();

</pre>
Foo osztály létrehozása és példányosítása. Az osztály nem tartalmaz <code>konstruktort</code>, csakis a <code>publikus</code> adat <code>mezőt.</code>
A publikus mezőt szabadon <code>írhatjuk</code>, és <code>olvashatjuk</code>.
<h3 id="mezok">Mezők</h3>
<p>
A mezők adatok tárolására alkalmasak, ezeke elláthatjuk elérhetőségi szinttel, de megukban kizárólag adattárolásra alkalmasak.
</p>
<p>
Objektumorientált programozásnál fontos szempont a <code>védettség</code> és az <code>adatrejtés</code>. Az előbbb bemutatott publikus mező nem megoldás, mivel az kivülről is elérhető.
</p>
<p>
Ezt nevezzük <code>közvetlen elérlésnek</code>, ami kerülendő. Hiszen összetett struktúráknál átláthatatlanná válik, hogy melyik mezőt mikor, mire módosítjuk.
Így kétségtelen, hogy a mezőnek védettnek kell lennie, és az elérést máshogy kell megoldani.
</p>
<h3 id="metomezok">Mezők elérése metódussal</h3>
Egy megoldás erre, egy külön metódus létrehozása a védett mező elésérére.
<pre>
class Foo
{
	int adat = 5;
	public void adat_ír(int a)
	{
		adat = a;
	}
	public int adat_olvas()
	{
		return adat;
	}
}
Foo a = new Foo();
a.adat_ír(6);
a.adat_olvas(); //6-al tér vissza
</pre>


</div>
            </div>

        </div>
    </div>



<script>
window.onscroll = scroll;
var le = 100;
document.querySelector("#documentation-nav .affix").style["top"]= le-window.pageYOffset + "px";
function scroll () 
{
	if(window.pageYOffset > le)
		document.querySelector("#documentation-nav .affix").style["top"]= 0;
	else
		document.querySelector("#documentation-nav .affix").style["top"]= le-window.pageYOffset + "px";
}
</script>

</body></html>